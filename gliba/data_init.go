package gliba

import (
	"github.com/coyim/gotk3adapter/glibi"
	"github.com/gotk3/gotk3/glib"
)

func init() {
	glibi.APPLICATION_FLAGS_NONE = glibi.ApplicationFlags(glib.APPLICATION_FLAGS_NONE)
	glibi.APPLICATION_IS_SERVICE = glibi.ApplicationFlags(glib.APPLICATION_IS_SERVICE)
	glibi.APPLICATION_HANDLES_OPEN = glibi.ApplicationFlags(glib.APPLICATION_HANDLES_OPEN)
	glibi.APPLICATION_HANDLES_COMMAND_LINE = glibi.ApplicationFlags(glib.APPLICATION_HANDLES_COMMAND_LINE)
	glibi.APPLICATION_SEND_ENVIRONMENT = glibi.ApplicationFlags(glib.APPLICATION_SEND_ENVIRONMENT)
	glibi.APPLICATION_NON_UNIQUE = glibi.ApplicationFlags(glib.APPLICATION_NON_UNIQUE)

	glibi.TYPE_INVALID = glibi.Type(glib.TYPE_INVALID)
	glibi.TYPE_NONE = glibi.Type(glib.TYPE_NONE)
	glibi.TYPE_INTERFACE = glibi.Type(glib.TYPE_INTERFACE)
	glibi.TYPE_CHAR = glibi.Type(glib.TYPE_CHAR)
	glibi.TYPE_UCHAR = glibi.Type(glib.TYPE_UCHAR)
	glibi.TYPE_BOOLEAN = glibi.Type(glib.TYPE_BOOLEAN)
	glibi.TYPE_INT = glibi.Type(glib.TYPE_INT)
	glibi.TYPE_UINT = glibi.Type(glib.TYPE_UINT)
	glibi.TYPE_LONG = glibi.Type(glib.TYPE_LONG)
	glibi.TYPE_ULONG = glibi.Type(glib.TYPE_ULONG)
	glibi.TYPE_INT64 = glibi.Type(glib.TYPE_INT64)
	glibi.TYPE_UINT64 = glibi.Type(glib.TYPE_UINT64)
	glibi.TYPE_ENUM = glibi.Type(glib.TYPE_ENUM)
	glibi.TYPE_FLAGS = glibi.Type(glib.TYPE_FLAGS)
	glibi.TYPE_FLOAT = glibi.Type(glib.TYPE_FLOAT)
	glibi.TYPE_DOUBLE = glibi.Type(glib.TYPE_DOUBLE)
	glibi.TYPE_STRING = glibi.Type(glib.TYPE_STRING)
	glibi.TYPE_POINTER = glibi.Type(glib.TYPE_POINTER)
	glibi.TYPE_BOXED = glibi.Type(glib.TYPE_BOXED)
	glibi.TYPE_PARAM = glibi.Type(glib.TYPE_PARAM)
	glibi.TYPE_OBJECT = glibi.Type(glib.TYPE_OBJECT)
	glibi.TYPE_VARIANT = glibi.Type(glib.TYPE_VARIANT)

	glibi.VARIANT_TYPE_BOOLEAN = WrapVariantType(glib.VARIANT_TYPE_BOOLEAN)
	glibi.VARIANT_TYPE_BYTE = WrapVariantType(glib.VARIANT_TYPE_BYTE)
	glibi.VARIANT_TYPE_INT16 = WrapVariantType(glib.VARIANT_TYPE_INT16)
	glibi.VARIANT_TYPE_UINT16 = WrapVariantType(glib.VARIANT_TYPE_UINT16)
	glibi.VARIANT_TYPE_INT32 = WrapVariantType(glib.VARIANT_TYPE_INT32)
	glibi.VARIANT_TYPE_UINT32 = WrapVariantType(glib.VARIANT_TYPE_UINT32)
	glibi.VARIANT_TYPE_INT64 = WrapVariantType(glib.VARIANT_TYPE_INT64)
	glibi.VARIANT_TYPE_UINT64 = WrapVariantType(glib.VARIANT_TYPE_UINT64)
	glibi.VARIANT_TYPE_HANDLE = WrapVariantType(glib.VARIANT_TYPE_HANDLE)
	glibi.VARIANT_TYPE_DOUBLE = WrapVariantType(glib.VARIANT_TYPE_DOUBLE)
	glibi.VARIANT_TYPE_STRING = WrapVariantType(glib.VARIANT_TYPE_STRING)
	glibi.VARIANT_TYPE_ANY = WrapVariantType(glib.VARIANT_TYPE_ANY)
	glibi.VARIANT_TYPE_BASIC = WrapVariantType(glib.VARIANT_TYPE_BASIC)
	glibi.VARIANT_TYPE_TUPLE = WrapVariantType(glib.VARIANT_TYPE_TUPLE)
	glibi.VARIANT_TYPE_UNIT = WrapVariantType(glib.VARIANT_TYPE_UNIT)
	glibi.VARIANT_TYPE_DICTIONARY = WrapVariantType(glib.VARIANT_TYPE_DICTIONARY)
	glibi.VARIANT_TYPE_STRING_ARRAY = WrapVariantType(glib.VARIANT_TYPE_STRING_ARRAY)
	glibi.VARIANT_TYPE_OBJECT_PATH_ARRAY = WrapVariantType(glib.VARIANT_TYPE_OBJECT_PATH_ARRAY)
	glibi.VARIANT_TYPE_BYTESTRING = WrapVariantType(glib.VARIANT_TYPE_BYTESTRING)
	glibi.VARIANT_TYPE_BYTESTRING_ARRAY = WrapVariantType(glib.VARIANT_TYPE_BYTESTRING_ARRAY)
	glibi.VARIANT_TYPE_VARDICT = WrapVariantType(glib.VARIANT_TYPE_VARDICT)
}
